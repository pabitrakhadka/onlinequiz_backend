generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String             @unique
  password   String
  address    String
  token      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  userScores UserDetailsScore[]
  user       UserDetails[]
  isActive   Boolean            @default(true)
}

model UserDetails {
  id           Int    @id @default(autoincrement())
  profileImage String
  bio          String
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
}

model Option {
  id     Int    @id @default(autoincrement())
  text   String
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

model UserDetailsScore {
  id        Int      @id @default(autoincrement())
  userId    Int
  quizId    Int
  score     Int
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id                     Int                      @id @default(autoincrement())
  categoryName           String
  createdAt              DateTime                 @default(now())
  quizzes                Quiz[]
  subjectiveQuestions    SubjectiveQuestion[]
  SubjectiveQuestionOnly SubjectiveQuestionOnly[]
  PdfSubjectiveQuestion  PdfSubjectiveQuestion[]
}

model News {
  id          Int      @id @default(autoincrement())
  image       String
  heading     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ShortcutKey {
  id          Int      @id @default(autoincrement())
  keyCombo    String   @unique
  description String
  category    String?
  createdAt   DateTime @default(now())
}

model FullForm {
  id          Int      @id @default(autoincrement())
  acronym     String   @unique
  fullForm    String
  description String?
  createdAt   DateTime @default(now())
}

model NewsBlog {
  id          Int      @id @default(autoincrement())
  image       String
  heading     String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contacts {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          Int                @id @default(autoincrement())
  question    String
  description String?
  answer      String
  categoryId  Int
  category    Category           @relation(fields: [categoryId], references: [id]) // Link to Category
  createdAt   DateTime           @default(now())
  options     Option[]
  userScores  UserDetailsScore[]
}

model SubjectiveQuestion {
  id         Int       @id @default(autoincrement())
  question   String    @unique
  answer     String
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id]) // Optional link to Category
  category2  String
  createdAt  DateTime  @default(now())
}

model SubjectiveQuestionOnly {
  id         Int      @id @default(autoincrement())
  question   String   @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id]) // Link to Category
  category1  Int
  createdAt  DateTime @default(now())
}

model PdfSubjectiveQuestion {
  id         Int      @id @default(autoincrement())
  fileName   String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id]) // Link to Category
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

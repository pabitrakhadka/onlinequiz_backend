generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  address   String
  token     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     UserDetails[]
  isActive Boolean       @default(true)

  QuizSession QuizSession[]
}

model UserDetails {
  id           Int    @id @default(autoincrement())
  profileImage String
  bio          String
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
}

model Option {
  id     Int    @id @default(autoincrement())
  text   String
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

model QuizSession {
  id         Int      @id @default(autoincrement())
  categoryId Int //like  id 1=set1 , set 2 of id 
  userId     Int
  score      Float
  timeTaken  Int // time taken
  datePlayed DateTime @default(now())
  attempt    Int      @default(1) ///
  position   Int? // Nullable for cases where ranking isn't calculated immediately

  // Relations
  category Category            @relation(fields: [categoryId], references: [id])
  user     User                @relation(fields: [userId], references: [id])
  details  QuizSessionDetail[]

  @@unique([categoryId, userId]) // Ensures unique session per user and quiz
}

model QuizSessionDetail {
  id         Int         @id @default(autoincrement())
  sessionId  Int
  questionId Int
  isCorrect  Boolean
  timeSpent  Int? // Optional, time spent on this question
  quiz       Quiz        @relation(fields: [questionId], references: [id])
  // Relations
  session    QuizSession @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, questionId]) // Prevent duplicate entries per question in the same session
  @@index([sessionId]) // For efficient lookups by session
}

model Category {
  id                     Int                      @id @default(autoincrement())
  categoryName           String
  createdAt              DateTime                 @default(now())
  quizzes                Quiz[]
  subjectiveQuestions    SubjectiveQuestion[]
  SubjectiveQuestionOnly SubjectiveQuestionOnly[]
  PdfSubjectiveQuestion  PdfSubjectiveQuestion[]
  QuizSession            QuizSession[]
  isActive               Boolean                  @default(true)
}

model News {
  id          Int      @id @default(autoincrement())
  image       String
  heading     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ShortcutKey {
  id          Int      @id @default(autoincrement())
  keyCombo    String   @unique
  description String
  category    String?
  createdAt   DateTime @default(now())
}

model FullForm {
  id          Int      @id @default(autoincrement())
  acronym     String   @unique
  fullForm    String
  description String?
  createdAt   DateTime @default(now())
}

model NewsBlog {
  id          Int      @id @default(autoincrement())
  image       String
  heading     String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contacts {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id                Int                 @id @default(autoincrement())
  question          String
  description       String?
  answer            String
  categoryId        Int
  category          Category            @relation(fields: [categoryId], references: [id]) // Link to Category
  createdAt         DateTime            @default(now())
  options           Option[]
  QuizSessionDetail QuizSessionDetail[]
}

model SubjectiveQuestion {
  id         Int       @id @default(autoincrement())
  question   String    @unique
  answer     String
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id]) // Optional link to Category
  category2  String
  createdAt  DateTime  @default(now())
}

model SubjectiveQuestionOnly {
  id         Int      @id @default(autoincrement())
  question   String   @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id]) // Link to Category
  category1  Int
  createdAt  DateTime @default(now())
}

model PdfSubjectiveQuestion {
  id         Int      @id @default(autoincrement())
  fileName   String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id]) // Link to Category
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SliderImage {
  id       Int     @id @default(autoincrement())
  fileName String
  isActive Boolean @default(true)
}

model Slug {
  id          Int    @id @default(autoincrement())
  title       String
  description String
}
